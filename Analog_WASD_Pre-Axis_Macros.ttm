// Part of Analog_WASD_Profile#.# keybinds packages
//---------------------------------------------------------------------------
//               Variable Initalisation
//---------------------------------------------------------------------------
struct JoyDevice{
    int MinRangeY; //calcuated minimum range for the Y axis of the device
    int MinRangeX; //calcuated minimum range for the X axis of the device
    int MinRangeZ; //calcuated minimum range for the Z axis of the device
    int HalfRangeY; //calcuated half range of the Y axis of the device
    int HalfRangeX; //calcuated half range of the X axis of the device
    int HalfRangeZ; //calcuated half range of the Z axis of the device
    int YValue; //Input Y axis value storage from device at a snapshot
    int XValue; //Input X axis value storage from device at a snapshot
    int ZValue; //Input Z axis value storage from device at a snapshot
    int LastNegY; //Storage point for Y axis last pos for reducing swing when returning to center
    int LastPosY; //Storage point for Y axis last pos for reducing swing when returning to center
    int LastNegX; //Storage point for X axis last pos for reducing swing when returning to center
    int LastPosX; //Storage point for X axis last pos for reducing swing when returning to center
    int LastNegZ; //Storage point for Z axis last pos for reducing swing when returning to center
    int LastPosZ; //Storage point for Z axis last pos for reducing swing when returning to center
    word KeyNegY; //Keypress storage for Y axis negative values
    word KeyPosY; //Keypress storage for Y axis postive values
    word KeyNegX; //Keypress storage for X axis negative values
    word KeyPosX; //Keypress storage for X axis postive values
    word KeyNegZ; //Keypress storage for Z axis negative values
    word KeyPosZ; //Keypress storage for Z axis postive values
};
    
JoyDevice RightDev;
JoyDevice LeftDev;

int CCount      = 0;

//---------------------------------------------------------------------------
//              WSAD Functions
//---------------------------------------------------------------------------
int MainPWMStart(){
    if (WarthogThrottle == 1){
        initLEDController();
        AxisToKeySet(); // Set Device to variable calls
        MapKey(&Throttle,APUON,CHAIN(REXEC(0,(PWMTimeLenght+TouchDelay),"PWMLogic();"),PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1))); // 100ms calls for the devices and turn on LED 1 for visual cue of activity
        MapKey(&Throttle,APUOFF,CHAIN(EXEC("StopAutoRepeat(0);"),PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1))); // kills 100ms calls to devices and turns off LED 1
    }
}

int T16000Logic(){
    if (CCount<1){
        CCount=CCount+1; 
        printf("Loading PWM Logic\xa");
        ActKey( KEYON+DOWN+REXEC(0,(PWMTimeLenght+TouchDelay),"PWMLogic();",RNOSTOP));
    }
    else{
        CCount=0;
        printf("Unloading PWM Logic\xa");
        ActKey( KEYON+UP+EXEC("StopAutoRepeat(0);"));
    }        
}
    
int AxisToKeySet(){
    if (WarthogStick == 1){
        RightDev.YValue = Joystick[JOYY]; // Pitch
        RightDev.XValue = Joystick[JOYX]; // Roll
        RightDev.HalfRangeY = A10JoyHalfRange;
        RightDev.HalfRangeX = A10JoyHalfRange;
        RightDev.MinRangeY = A10JoyAxisRange*DeadZoneCalPerc1;
        RightDev.MinRangeX = A10JoyAxisRange*DeadZoneCalPerc1;
        RightDev.KeyNegY = PitchUp;
        RightDev.KeyPosY = PitchDown;
        RightDev.KeyNegX = RollRight;
        RightDev.KeyPosX = RollLeft;
    }
        
    if (WarthogThrottle == 1){
        //Mouse2XValue = Throttle[SCX]; // Mouse up/down
        //Mouse2YValue = Throttle[SCY]; // Mouse left/right
        LeftDev.YValue = Throttle[THR_RIGHT]; // Main Forward Thrust
        LeftDev.XValue = Throttle[THR_LEFT];
        LeftDev.ZValue = Throttle[THR_FC];
        LeftDev.HalfRangeY = A10JoyHalfRange;
        LeftDev.HalfRangeX = A10JoyHalfRange;
        LeftDev.HalfRangeZ = A10JoyHalfRange;
        LeftDev.MinRangeY = A10JoyAxisRange*DeadZoneCalPerc2;
        LeftDev.MinRangeX = A10JoyAxisRange*DeadZoneCalPerc2;
        LeftDev.MinRangeZ = A10JoyAxisRange*DeadZoneCalPerc2;
        LeftDev.KeyNegY = ThrottleUp;
        LeftDev.KeyPosY = ThrottleDown;
        LeftDev.KeyNegX = AltThrottleUp;
        LeftDev.KeyPosX = AltThrottleDown;
        LeftDev.KeyNegZ = TrimInc;
        LeftDev.KeyPosZ = TrimDecr;
    }
        
    if (T16000Right == 1){
        RightDev.YValue = T16000[JOYY]; // Pitch
        RightDev.XValue = T16000[JOYX]; // Roll
        RightDev.ZValue = T16000[RUDDER]; // Yaw
        RightDev.HalfRangeY = T16000HalfRange;
        RightDev.HalfRangeX = T16000HalfRange;
        RightDev.HalfRangeZ = T16000RotHalfRange;
        RightDev.MinRangeY = T16000AxisRange*DeadZoneCalPerc1;
        RightDev.MinRangeX = T16000AxisRange*DeadZoneCalPerc1;
        RightDev.MinRangeZ = T16000RotAxisRange*DeadZoneCalPerc1;
        RightDev.KeyNegY = PitchUp;
        RightDev.KeyPosY = PitchDown;
        RightDev.KeyNegX = RollRight;
        RightDev.KeyPosX = RollLeft;
        RightDev.KeyNegZ = YawRight;
        RightDev.KeyPosZ = YawLeft;
    }
        
    if (T16000Left == 1){
        LeftDev.YValue = T16000L[JOYY]; // Throttle
        LeftDev.XValue = T16000L[JOYX]; // Translate Left/Right
        LeftDev.ZValue = T16000L[RUDDER];
        LeftDev.HalfRangeY = T16000HalfRange;
        LeftDev.HalfRangeX = T16000HalfRange;
        LeftDev.HalfRangeZ = T16000RotHalfRange;
        LeftDev.MinRangeY = T16000AxisRange*DeadZoneCalPerc1;
        LeftDev.MinRangeX = T16000AxisRange*DeadZoneCalPerc1;
        LeftDev.MinRangeZ = T16000RotAxisRange*DeadZoneCalPerc1;
        LeftDev.KeyNegY = ThrottleUp;
        LeftDev.KeyPosY = ThrottleDown;
        LeftDev.KeyNegX = ThrustRight;
        LeftDev.KeyPosX = ThrustLeft;
        LeftDev.KeyNegZ = TrimInc;
        LeftDev.KeyPosZ = TrimDecr;
    }
}

int AxisToKey(int DC,short PKey){ // Application of Dutycycle call to keypress
    ActKey(LOCK+KEYON+PKey);
    DeferCall((DC+TouchDelay),&ActKey,PKey);
    if(Debug) printf("Duty Cycle : %i ,%c \xa",DC,PKey);
}

//---------------------------------------------------------------------------
//              PWM Functions
//---------------------------------------------------------------------------

int PWMLogic(){
    if (Debug) printf("tick \xa");
    AxisToKeySet();
    if (RightDev.YValue < (-RightDev.MinRangeY) | RightDev.YValue > RightDev.MinRangeY){ //Joystick Y axis
        PulseFormer(RightDev.YValue,RightDev.HalfRangeY,RightDev.LastNegY,RightDev.LastPosY,RightDev.KeyNegY,RightDev.KeyPosY);
    }
    if (RightDev.XValue < (-RightDev.MinRangeX) | RightDev.XValue > RightDev.MinRangeX){ //Joystick X axis
        PulseFormer(RightDev.XValue,RightDev.HalfRangeX,RightDev.LastNegX,RightDev.LastPosX,RightDev.KeyNegX,RightDev.KeyPosX);
    }
        
    if (T16000Right == 1) { //T16000.m Extra axis for Yaw controle
        if (RightDev.ZValue < (-RightDev.MinRangeZ) | RightDev.ZValue > RightDev.MinRangeZ){ //Joystick Z axis
            PulseFormer(RightDev.ZValue,RightDev.HalfRangeZ,RightDev.LastNegZ,RightDev.LastPosZ,RightDev.KeyNegZ,RightDev.KeyPosZ);
        }
    }
        
    if (WarthogThrottle == 1){
        if (LeftDev.YValue < (-LeftDev.MinRangeY) | LeftDev.YValue > LeftDev.MinRangeY){ //A10 Throttle Y axis
            PulseFormer(LeftDev.YValue,LeftDev.HalfRangeY,LeftDev.LastNegY,LeftDev.LastPosY,LeftDev.KeyNegY,LeftDev.KeyPosY);
        }
        if (LeftDev.XValue < (-LeftDev.MinRangeX) | LeftDev.XValue > LeftDev.MinRangeX){ //A10 Throttle X Axis
            PulseFormer(LeftDev.XValue,LeftDev.HalfRangeX,LeftDev.LastNegX,LeftDev.LastPosX,LeftDev.KeyNegX,LeftDev.KeyPosX);
        }
        if (LeftDev.ZValue < (-LeftDev.MinRangeZ) | LeftDev.ZValue > LeftDev.MinRangeZ){ //A10 Throttle Z Axis
            PulseFormer(LeftDev.ZValue,LeftDev.HalfRangeZ,LeftDev.LastNegZ,LeftDev.LastPosZ,LeftDev.KeyNegZ,LeftDev.KeyPosZ);
        }
    }
            
    if (T16000Left == 1){
        if (LeftDev.YValue < (-LeftDev.MinRangeY) | LeftDev.YValue > LeftDev.MinRangeY){ //Joystick Y axis
            PulseFormer(LeftDev.YValue,LeftDev.HalfRangeY,LeftDev.LastNegY,LeftDev.LastPosY,LeftDev.KeyNegY,LeftDev.KeyPosY);
        }
        if (LeftDev.XValue < (-LeftDev.MinRangeX) | LeftDev.XValue > LeftDev.MinRangeX){ //Joystick X axis
            PulseFormer(LeftDev.XValue,LeftDev.HalfRangeX,LeftDev.LastNegX,LeftDev.LastPosX,LeftDev.KeyNegX,LeftDev.KeyPosX);
        }
        if (LeftDev.ZValue < (-LeftDev.MinRangeZ) | LeftDev.ZValue > LeftDev.MinRangeZ){ //Joystick Z axis
            PulseFormer(LeftDev.ZValue,LeftDev.HalfRangeZ,LeftDev.LastNegZ,LeftDev.LastPosZ,LeftDev.KeyNegZ,LeftDev.KeyPosZ);
        }
    }
}

int PulseFormer(int axis_value,int range,int pos1,int pos2,word key1,word key2){
    int onDutyTime = PWMPress(axis_value,range,pos1,pos2);
    if (axis_value > 0){
	   AxisToKey (onDutyTime, key1);
	   if(Debug) printf("Point 1+ > %i, %i, %x \xa",axis_value,onDutyTime,key1);
    }
    if (axis_value < 0){
	   AxisToKey (abs(onDutyTime), key2);
	   if(Debug) printf("Point 1- > %i, %i, %x \xa",axis_value,abs(onDutyTime),key2);
    }        
}

int PWMPress (int mag,int range,int pos1,int pos2){ // Math to convert Joystick Value to duty cycle in ms of a keypress. Dutycycle time is 100ms
    float fduty = 0.0;
    int duty = 0;
    fduty = ((abs(mag))/range)*PWMTimeLenght;
    duty = fduty-fduty%1;
    if (mag > 0){
        if(Debug) printf("PW Mag Cal Axis+: %i, %i \xa",mag,duty);
        return(DutyGreater(duty,pos1));
    }
    if (mag < 0){
        if(Debug) printf("PW Mag Cal Axis-: %i, %i \xa",mag,duty);
        return(DutyLess(duty,pos2));
    }
}

int DutyLess (int duty,int pos){ // Math to dampen return to zero values
    if (pos <= duty){
        pos = duty;
        if(Debug) printf("Duty Less Ret: %i \xa",duty);
        return duty;
    }
    else {
        pos = duty;
        if(Debug) printf("Duty Less Disc: %i \xa",duty);
        return 0; 
    }
}
    
int DutyGreater (int duty,int pos){ // Math to dampen return to zero values
    if (pos >= duty){
        pos = duty;
        if(Debug) printf("Duty Greater Ret: %i \xa",duty);
        return duty;
    }
    else{
        pos = duty;
        if(Debug) printf("Duty Greater Disc: %i \xa",duty);
        return 0;
    }
}